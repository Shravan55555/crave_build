#
# Copyright (C) 2024 Antonino Scordino
# Copyright (C) 2024 Souhrud Reddy
#
# SPDX-License-Identifier: Apache-2.0
#

name: Build in foss.crave.io
on:
  workflow_dispatch:
    inputs:
       BASE_PROJECT:
        description: 'Choose a base project:'
        required: true
        type: choice
        options:
          - 'AOSP'
          - 'LineageOS'
          - 'DerpFest'
          - 'PixelOS'
          - 'RisingOS'
       DEVICE_CODENAME:
        description: "Device codename:"
        required: true
        default: "RMX1901"
       BUILD_SCRIPT:
        description: 'Build script raw URL:'
        required: true
       BUILD_CLEAN:
        description: 'Build using a new/clean machine? (yes/no)'
        default: "no"

jobs:
  Start-Runner:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up environment
      run: |
        sudo apt-get update
        sudo apt-get install -y tmux

      # Download and configure 'crave'.
    - name: Configure the 'crave' environment
      run: |
        mkdir ${HOME}/bin/
        curl -s https://raw.githubusercontent.com/accupara/crave/master/get_crave.sh | bash -s --
        mv ${PWD}/crave ${HOME}/bin/
        sudo ln -sf /home/${USER}/bin/crave /usr/bin/crave
        envsubst < ${PWD}/crave.conf.sample >> ${PATH}/crave.conf
        rm -rf ${PWD}/crave.conf.sample          

      env:
        CRAVE_USERNAME: ${{  secrets.CRAVE_USERNAME  }}
        CRAVE_TOKEN: ${{  secrets.CRAVE_TOKEN  }}

    - name: Run crave devspace
      run: |
        crave devspace -- "
        echo "Looking for runner..."
          # Look for whether there's a runner folder set up
        if [ -f actions-runner/run.sh ] ; then
          echo -e '\e[32mRunner found! Restarting it...\e[0m'
        else
          echo -e '\e[31mError! Runner not found!\e[0m'
          exit 1
        fi

        if tmux has-session -t ghactions; then 
          echo -e '\e[32mRunner is already Running\e[0m'
        else 
          tmux kill-session -t ghactions;
          tmux new-session -d -s ghactions 
          tmux send-keys -t ghactions './actions-runner/run.sh' Enter 
          echo -e '\e[32mRunner Started\e[0m'
        fi "
        
  prepare:
    name: Prepare for Building
    runs-on: ubuntu-latest
    steps:
    - name: Check-out to repository
      uses: actions/checkout@v4

    - name: Check Credentials
      run: |
        if [[ -z "${{ secrets.CRAVE_TOKEN }}" || -z "${{ secrets.CRAVE_USERNAME }}" ]]; then
          echo -e '\e[31mCrave Credentials Not Configured! Exiting...\e[0m'
          exit 1
        fi
        bash configs/env-checker.sh

    - name: Set Project variables
      id: proj-variables
      run: |
        case "${{ github.event.inputs.BASE_PROJECT }}" in
          "AOSP") export PROJECTFOLDER="/crave-devspaces/AOSP"; export PROJECTID="35";;
          "DerpFest") export PROJECTFOLDER="/crave-devspaces/DerpFest-AOSP"; export PROJECTID="64";;
          "LineageOS") export PROJECTFOLDER="/crave-devspaces/LineageOS"; export PROJECTID="72";;
          "PixelOS") export PROJECTFOLDER="/crave-devspaces/PixelOS"; export PROJECTID="82";;
          "RisingOS") export PROJECTFOLDER="/crave-devspaces/RisingOS"; export PROJECTID="86";;
        esac
        
        echo "PROJECTFOLDER=$PROJECTFOLDER" >> $GITHUB_ENV
        echo "PROJECTID=$PROJECTID" >> $GITHUB_ENV
        
    outputs:
      PROJECTFOLDER: ${{ env.PROJECTFOLDER }}
      PROJECTID: ${{ env.PROJECTID }}
        
  build:
    needs: prepare
    timeout-minutes: 960
    name: Build in foss.crave.io
    runs-on: self-hosted
    
    steps:
    
    - name: Send Telegram build start notification
      if: always()
      run: |
        curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
          -d text="üöÄ Build Started!%0A%0Aüì± Device: ${{ github.event.inputs.DEVICE_CODENAME }}%0Aüì¶ Project: ${{ github.event.inputs.BASE_PROJECT }}%0Aüîß Clean Build: ${{ github.event.inputs.BUILD_CLEAN }}%0Aüìä Run ID: ${{ github.run_id }}%0A‚è∞ Started: $(date +'%Y-%m-%d %H:%M:%S UTC')" \
          -d parse_mode="HTML"

    - name: Initialize build directory
      run: |
        PROJECTFOLDER="${{ needs.prepare.outputs.PROJECTFOLDER }}"
        PROJECTID="${{ needs.prepare.outputs.PROJECTID }}"
        
        existing_clones=$(crave clone list --json | jq -r '.clones[]."Cloned At"')
          
        for dir in $existing_clones; do
          if [[ "$dir" != "$PROJECTFOLDER" ]]; then
            echo "Removing old project directory: $dir"
            crave clone destroy -y "$dir"
          fi
        done

        # Check if the current project directory exists or create it
        if grep -q "$PROJECTFOLDER" <<< "$existing_clones" && [ "${DCDEVSPACE}" == "1" ]; then
          echo "Base project $PROJECTFOLDER build directory exists! Reusing it."
          echo "BUILD_DIR=$PROJECTFOLDER" >> $GITHUB_ENV
        else
          crave clone create --projectID "$PROJECTID" "$PROJECTFOLDER"
          echo "BUILD_DIR=$PROJECTFOLDER" >> $GITHUB_ENV
        fi

        echo "DEVICE_CODENAME=${{ github.event.inputs.DEVICE_CODENAME }}" >> $GITHUB_ENV
        echo "Building on $PROJECTFOLDER project"

    - name: Set up persistent hostname
      run: |
        cd ${{ env.BUILD_DIR }}
        
        if [ ! -f ".repo/manifests/crave.yaml" ]; then
            curl -s https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref }}/configs/crave.yaml > .repo/manifests/crave.yaml
        fi

    - name: Queue build
      continue-on-error: true
      run: |
        cd ${{ env.BUILD_DIR }}

        jq '.projects = []' ~/crave.conf > tmp && mv tmp ~/crave.conf

        crave ssh -- "rm -f out/target/product/${{ env.DEVICE_CODENAME }}/*.zip out/target/product/${{ env.DEVICE_CODENAME }}/*sum"
        
        echo -e '\e[32mYour build is now on queue, check it on foss.crave.io\e[0m'
        
        # Send queue notification
        curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
          -d text="üìã Build Queued!%0A%0A‚è≥ Waiting for build to start on foss.crave.io...%0Aüì± Device: ${{ env.DEVICE_CODENAME }}%0Aüì¶ Project: ${{ github.event.inputs.BASE_PROJECT }}" \
          -d parse_mode="HTML"

        [[ "${{ github.event.inputs.BUILD_CLEAN }}" == "yes" ]] && CLEAN_FLAG="--clean" || CLEAN_FLAG=""
        
        # Start build with progress monitoring
        crave run $CLEAN_FLAG --no-patch -- "bash -c \"\
          curl -s ${{ github.event.inputs.BUILD_SCRIPT }} | bash &\
          BUILD_PID=\$!\
          \
          # Function to send Telegram updates
          send_telegram_update() {\
            local message=\$1\
            curl -s -X POST 'https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage' \
              -d chat_id='${{ secrets.TELEGRAM_CHAT_ID }}' \
              -d text=\"\$message\" \
              -d parse_mode='HTML' > /dev/null\
          }\
          \
          # Monitor build progress
          while kill -0 \$BUILD_PID 2>/dev/null; do\
            # Check build status every 5 minutes
            sleep 300\
            \
            # Get current build progress from log files
            if [ -f out/build.log ]; then\
              PROGRESS=\$(tail -n 50 out/build.log | grep -i 'building\|compiling\|%\|completed\|finish' | tail -n 1)\
              if [ ! -z \"\$PROGRESS\" ]; then\
                send_telegram_update \"üîÑ Build Progress Update%0A%0Aüì± Device: ${{ env.DEVICE_CODENAME }}%0Aüì¶ Project: ${{ github.event.inputs.BASE_PROJECT }}%0Aüìä Status: %0A\$(echo \$PROGRESS | cut -c1-1000)\"%0A‚è∞ Time: \$(date +'%H:%M:%S UTC')\"\
              fi\
            fi\
          done\
          \
          wait \$BUILD_PID\
          BUILD_EXIT=\$?\
          \
          if [ \$BUILD_EXIT -eq 0 ]; then\
            send_telegram_update \"‚úÖ Build Completed Successfully!%0A%0Aüì± Device: ${{ env.DEVICE_CODENAME }}%0Aüì¶ Project: ${{ github.event.inputs.BASE_PROJECT }}%0A‚è∞ Finished: \$(date +'%Y-%m-%d %H:%M:%S UTC')\"\
          else\
            send_telegram_update \"‚ùå Build Failed!%0A%0Aüì± Device: ${{ env.DEVICE_CODENAME }}%0Aüì¶ Project: ${{ github.event.inputs.BASE_PROJECT }}%0A‚è∞ Failed: \$(date +'%Y-%m-%d %H:%M:%S UTC')%0Aüîç Exit Code: \$BUILD_EXIT\"\
          fi\
          exit \$BUILD_EXIT\
        \""

    - name: Send build completion notification
      if: success()
      run: |
        curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
          -d text="üéâ Build Completed Successfully!%0A%0Aüì± Device: ${{ env.DEVICE_CODENAME }}%0Aüì¶ Project: ${{ github.event.inputs.BASE_PROJECT }}%0A‚è∞ Duration: $((GITHUB_JOB_END_TIME - GITHUB_JOB_START_TIME)) seconds%0Aüìä Run ID: ${{ github.run_id }}%0Aüîó GitHub: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
          -d parse_mode="HTML"

    - name: Error Log
      if: failure()
      run: |
        cd ${{ env.BUILD_DIR }}

        crave pull 'out/error.log'
        echo "Displaying error.log"
        cat out/error.log
        
        # Send error notification with log snippet
        ERROR_SNIPPET=$(tail -n 10 out/error.log | sed 's/&/&amp;/g; s/</&lt;/g; s/>/&gt;/g')
        curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
          -d text="‚ùå Build Failed with Errors!%0A%0Aüì± Device: ${{ env.DEVICE_CODENAME }}%0Aüì¶ Project: ${{ github.event.inputs.BASE_PROJECT }}%0A‚è∞ Failed: $(date +'%Y-%m-%d %H:%M:%S UTC')%0A%0Aüîç Last 10 lines of error log:%0A<code>$ERROR_SNIPPET</code>" \
          -d parse_mode="HTML"
        
        rm -rf out
        exit 1

    - name: Clean Artifacts from previous Build
      run: |
        cd ${{ env.BUILD_DIR }}

        rm -rf *.zip *.sha256sum *.md5sum *.img out ${{ env.DEVICE_CODENAME }}*json ${{ env.DEVICE_CODENAME }}*txt

    - name: Pull and Validate Build Artifacts
      continue-on-error: false
      run: |
        cd ${{ env.BUILD_DIR }}

        crave pull 'out/target/product/${{ env.DEVICE_CODENAME }}/*.zip'
        rm -f *-ota-*.zip *-eng*.zip lineage*ota.zip aosp*ota.zip statix*ota.zip

        if [ -z "$(find . -maxdepth 1 -name '*.zip' | sed 's|^\./||')" ]; then
            echo -e '\e[31mERROR! The build might have failed, cancelled, or the runner died!\e[0m'
            echo -e '\e[31mCheck the error logs or go to foss.crave.io\e[0m'
            exit 1
        else
            crave pull 'out/target/product/${{ env.DEVICE_CODENAME }}/recovery*img' \
            'out/target/product/${{ env.DEVICE_CODENAME }}/*.sha256sum' \
            'out/target/product/${{ env.DEVICE_CODENAME }}/*.md5sum' \
            'out/target/product/${{ env.DEVICE_CODENAME }}/boot*img' \
            'out/target/product/${{ env.DEVICE_CODENAME }}/vendor_boot*img' \
            'out/target/product/${{ env.DEVICE_CODENAME }}/${{ env.DEVICE_CODENAME }}*json' \
            'out/target/product/${{ env.DEVICE_CODENAME }}/${{ env.DEVICE_CODENAME }}*txt'

            mkdir -p out
            
            file_name=$(find . -maxdepth 1 -name '*.zip' | sed 's|^\./||')
            release_title=$(basename "$file_name" .zip)

            mv -f ${{ env.DEVICE_CODENAME }}*json ${{ env.DEVICE_CODENAME }}*txt *.zip *.sha256sum *.md5sum *.img out/ || true
            
            echo "ZIP_FILE=$file_name" >> $GITHUB_ENV
            echo "RELEASE_DATE=$(date +'%B %-d, %Y %H:%M')" >> $GITHUB_ENV
            echo "RELEASENAME=$release_title" >> $GITHUB_ENV
        fi

    - name: Display files information
      run: |
        cd "${{ env.BUILD_DIR }}/out"

        echo "FILE PATH: ${{ env.BUILD_DIR }}/out"
        echo "File details:"
        find . -type f -exec ls -lh {} \; | awk '{print $9 ": " $5}'

    - name: Send artifacts ready notification
      run: |
        cd ${{ env.BUILD_DIR }}/out
        
        ARTIFACTS_INFO=$(find . -type f -name "*.zip" -o -name "*.img" -o -name "*.sha256sum" -o -name "*.md5sum" | xargs -I {} sh -c 'echo "üìÑ $(basename {}) - $(ls -lh {} | awk '\''{print $5}'\'')";')
        
        curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
          -d text="üì¶ Build Artifacts Ready!%0A%0Aüì± Device: ${{ env.DEVICE_CODENAME }}%0Aüì¶ Project: ${{ github.event.inputs.BASE_PROJECT }}%0A%0Aüìä Generated Files:%0A$ARTIFACTS_INFO%0Aüîó GitHub Release: https://github.com/${{ github.repository }}/releases/tag/${{ github.run_id }}" \
          -d parse_mode="HTML"

    - name: Upload to GitHub releases
      run: |
        cd ${{ env.BUILD_DIR }}/out

        NC='\033[0m'
        RED='\033[0;31m'

        if ! command -v gh &> /dev/null; then
           echo "gh could not be found. Installing gh..."
           curl -sS https://webi.sh/gh | sh
           source ~/.config/envman/PATH.env
           echo "gh installed."
        fi

        gh auth login --with-token <<< ${{ secrets.GITHUB_TOKEN }}

        if [[ -f "${{ env.ZIP_FILE }}" ]]; then
            file_size=$(stat -c%s "${{ env.ZIP_FILE }}")
            if [[ $file_size -gt 2147483648 ]]; then
                echo -e '\e[31m${{ env.ZIP_FILE }} is too large for GitHub release so it will be skipped!\e[0m'
                echo -e '\e[31mGo to your devspace and upload it somewhere else!\e[0m'
                skip_zip=true
                zip_status="Skipped (too large)"
            else
                zip_status="Included"
            fi

            zip_size=$(numfmt --to=iec $file_size)
            release_notes="ZIP File: ${{ env.ZIP_FILE }} | Size: $zip_size | Status: $zip_status"

            gh release create ${{ github.run_id }} --repo ${{ github.repository }} --title ${{ env.RELEASENAME }} --notes "$release_notes"

            if [[ "$skip_zip" != true ]]; then
                gh release upload ${{ github.run_id }} --repo ${{ github.repository }} ${{ env.BUILD_DIR }}/out/*
            else
                gh release upload ${{ github.run_id }} --repo ${{ github.repository }} $(find ${{ env.BUILD_DIR }}/out/ -type f ! -name '*.zip')
            fi
        fi

    - name: Execute if the job is cancelled
      if: ${{ cancelled() }}
      run: |
        cd ${{ env.BUILD_DIR }}

        # Send cancellation notification
        curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
          -d text="‚èπÔ∏è Build Cancelled!%0A%0Aüì± Device: ${{ env.DEVICE_CODENAME }}%0Aüì¶ Project: ${{ github.event.inputs.BASE_PROJECT }}%0A‚è∞ Cancelled: $(date +'%Y-%m-%d %H:%M:%S UTC')%0Aüîó Run ID: ${{ github.run_id }}" \
          -d parse_mode="HTML"

        crave stop --all
